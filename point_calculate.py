"""
This file calculate the point for each test on a single maze. 
"""

import re

"""
The class to calculate the point for each test
"""
class point_calculation:
    """
    Initialize the point calculation

    Args:
            start_pos, end_pos, obstacles: Info generated by maze descriptor.
            input_string: The generated answer by the model
    """
    def __init__(self, start_pos, end_pos, input_string, obstacles):
        self.start_pos = start_pos
        self.end_pos = end_pos
        self.input_string = input_string
        self.obstacles = obstacles


    # Find all the integer pairs in the answer
    def find_integer_pairs(self):

        pairs = []
        pattern = re.compile(r'\d+,\d+|\d+, \d+')
        matches = pattern.findall(self.input_string)

        for match in matches:
            parts = match.split(',')

            try:
                num1 = int(parts[0])
                num2 = int(parts[1])
                pairs.append([num1, num2])
            except ValueError:
                continue

        return pairs

    # Find all the word after move.
    def extract_words_after_move(self):
        sentences = self.input_string.split('.')
        words = []
        for sentence in sentences:

            sentence_words = [word.lower() for word in sentence.split()]
            
            try:
                move_index = sentence_words.index("move")
            except ValueError:
                    continue
            
            if move_index < len(sentence_words) - 1:
                words.append(sentence.split()[move_index + 1])
        
        return words

    # Calculate the point get by the answer
    def point_calculate(self):
        pairs = self.find_integer_pairs()
        words = self.extract_words_after_move()
        # print(pairs)
        # print(words)
        startend_dp = 0
        step_dp = 0
        direc_cor_dp = 0
        obs_dp = 1

        # If the data from prompt is not enough for analyzing.
        if len(pairs) < 1:
            return 0, 0, 0, 0
        
        # If the start and ending coordinate is correct. 
        if pairs[0] == self.start_pos and pairs[-1] == self.end_pos:
            startend_dp = 1

        # If the agent is moving one step at a time.
        if self.diagonal_check(pairs):
            step_dp = 1

        #if the number of moves doesn't match the number of pairs
        if len(pairs) != len(words) + 1:
            direc_cor_dp = 0

        #check the direction match the change of coordinates
        elif self.relation_check(pairs, words):
            direc_cor_dp = 1
        
        # Check the agent doesn't go through the obstacles
        for coor in self.obstacles:
            if coor in pairs:
                obs_dp = 0
                break

        return startend_dp, step_dp, direc_cor_dp, obs_dp

    def diagonal_check(self, pairs):
        for i in range(1, len(pairs)):
            x1, y1 = pairs[i-1]
            x2, y2 = pairs[i]
            if x1 == x2 and abs(y1 - y2) == 1:
                continue
            elif y1 == y2 and abs(x1 - x2) == 1:
                continue
            else:
                return False
        return True


    def relation_check(self, pairs, words):
        for i in range(1, len(pairs)):
            x1, y1 = pairs[i-1]
            x2, y2 = pairs[i]
            if x1 != x2 and y1 != y2:
                return False
            
            dx = x2 - x1
            dy = y2 - y1
            if dx == 0 and dy == 0:
                return False

            if dx > 0 and words[i-1].lower() != 'right':
                return False
            elif dx < 0 and words[i-1].lower() != 'left':
                return False
            elif dy > 0 and words[i-1].lower() != 'up':
                return False
            elif dy < 0 and words[i-1].lower() != 'down':
                return False
        return True
        

# a = point_calculation([0,0], [2,2],"Start at space 0,0.Move up to space 0,1.Move up to space 0,2.Move right to space 2,2.Move right to space 2,2." , [])
# p = a.point_calculate()

# print(find_integer_pairs("Start at space 0,0.Move up to space 0,1.Move up to space 0,2.Move right to space 2,2.Move right to space 2,2."))
# print(find_integer_pairs("Here are some numbers: 1,2 3,4 5,6 and 7."))
# print(extract_words_after_move("Start at space 0,0.Move up to space 0,1.Move up to space 0,2.Move right to space 2,2.Move right to space 2,2."))
# print(diagonal_check([(0, 0), (0, 1), (0, 2), (2, 2), (2, 2)]))
# print(relation_check([(0, 0), (0, 1), (0, 2), (2, 2), (2, 2)], ['up', 'up', 'right', 'right']))